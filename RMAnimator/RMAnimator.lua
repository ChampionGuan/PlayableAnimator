---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/10/9 11:37
---

require("Runtime.Battle.XECS.XECS")

---@type RMAnimatorContext
local RMAnimatorContext = require("Runtime.Battle.Logic.RMAnimator.RMAnimatorContext")
---@type RMAnimatorEvent
local RMAnimatorEvent = require("Runtime.Battle.Logic.RMAnimator.RMAnimatorEvent")
---@type ActorBehavior
local ActorBehavior = require("Runtime.Battle.Logic.Actor.ActorBehavior")

---@class RMAnimator:ActorBehavior
---@field _speed Fix
---@field _rmCtrl RMAnimatorController
---@field disabled Boolean
---@field stateNotify RMAnimatorEvent fun(layerIndex:Int,notifyType:RMStateNotifyType,stateName:String)
---@field eventNotify RMAnimatorEvent fun(eventName:string, eventArgs:table<string,any>)
local RMAnimator = XECS.class("RMAnimator", ActorBehavior)
RMAnimator.Type = ActorBehaviorType.RMAnimator

function RMAnimator:ctor()
    self.disabled = false
end

function RMAnimator:Awake()
    local ctrlName = self.actor:GetAnimatorFilename()
    if ctrlName then
        ---@type AnimatorCtrlConfig
        self.config = XECS.PRequire("Config.Battle.RMAnimator." .. ctrlName)
    else
        Debug.LogErrorFormat("动画状态机加载失败：角色(id=%d) AnimatorFilename字段没有配置！", self.actor:GetConfigID())
    end

    local eventLineConfig = nil
    if self.actor.config.TimelineEvent then
        eventLineConfig = XECS.PRequire("Config.Battle.TimelineEvent." .. self.actor.config.TimelineEvent)
    end

    self.stateNotify = RMAnimatorEvent.new()
    self.eventNotify = RMAnimatorEvent.new()

    self._speed = FOne
    self._context = RMAnimatorContext.new(self.actor.transform)

    self._rmCtrl = self._context:CreateAnimatorCtrl(self.config, eventLineConfig)
    self._rmCtrl:Rebuild(self)

    ---@type ViewAnimator
    self._viewAnimator = self.actor.view:CreateViewAnimator()
end

function RMAnimator:Start()
    self.eventNotify:AddListener(self, self._OnLogicEventNotify)
    self.stateNotify:AddListener(self, self._CrossFadeInFixedTime)
    self._rmCtrl:OnStart()
    self._viewAnimator:OnStart()
end

function RMAnimator:LateUpdate()
    -- TODO 轮询后面改成通知
    self:SetLayerSpeed(self.actor:GetTimeScale(), 1)
    if not self.disabled then
        self._rmCtrl:OnUpdate(self.actor.battle.deltaTime * self._speed)
    end
end

function RMAnimator:OnDestroy()
    self._rmCtrl:OnDestroy()
    self._rmCtrl = nil
    self._viewAnimator:OnDestroy()
    self._viewAnimator = nil
    self._context:Dispose()
    self._context = nil
    self.eventNotify:Clear()
    self.stateNotify:Clear()
    ActorBehavior.OnDestroy(self)
end

---@param stateName String
---@param stateSpeed Fix
---@param skipSameState boolean
---@param fadeTime Fix
---@param layerIndex Int
function RMAnimator:Play(stateName, stateSpeed, skipSameState, fadeTime, layerIndex)
    if self.disabled then
        return
    end

    stateName = self:GetReplaceStateName(stateName)
    if skipSameState and self:GetCurrentStateName() == stateName then
        return
    end

    layerIndex = layerIndex or 1
    fadeTime = fadeTime or self:_GetFadeConfig(stateName, layerIndex)

    if stateSpeed then
        self:SetStateSpeed(stateName, layerIndex, stateSpeed)
    end
    if layerIndex == 1 then
        self._rmCtrl:CrossFadeInFixedTime(stateName, fadeTime, layerIndex, FZero)
    else
        self._viewAnimator:CrossFadeInFixedTime(stateName, FZero, fadeTime, layerIndex, FZero)
    end
end

function RMAnimator:_GetFadeConfig(stateName, layerIndex)
    if layerIndex ~= 1 then
        return FZero
    end

    ---mute的过渡 用于策划配置过渡
    for _, transition in ipairs(self:GetState(self:GetCurrentStateName(), layerIndex).transitions) do
        if transition.destinationStateName == stateName and transition.mute then
            return transition.duration
        end
    end
    local anyStateTransitions = self.config.layers[layerIndex].anyStateTransitions
    if anyStateTransitions then
        for _, transition in ipairs(anyStateTransitions) do
            if transition.destinationStateName == stateName then
                return transition.duration
            end
        end
    end

    --都没找到返回默认值0
    return FZero
end

---@param stateName String
---@param layerIndex Int
function RMAnimator:HasState(stateName, layerIndex)
    layerIndex = layerIndex or 1
    if layerIndex == 1 then
        return self._rmCtrl:HasState(stateName, layerIndex)
    else
        return self._viewAnimator:HasState(stateName, layerIndex)
    end
end

---@param stateName String
---@param layerIndex Int
---@return RMAnimatorState
function RMAnimator:GetState(stateName, layerIndex)
    layerIndex = layerIndex or 1
    if layerIndex == 1 then
        return self._rmCtrl:GetState(stateName, layerIndex)
    else
        return self._viewAnimator:GetState(stateName, layerIndex)
    end
end

---@param nameO string
---@param nameN string
function RMAnimator:ReplaceStateName(nameO, nameN)
    ---@type table<string, string>
    self._replaceStateNames = self._replaceStateNames or {}
    self._replaceStateNames[nameO] = nameN
end

---@return string
function RMAnimator:GetReplaceStateName(stateName)
    if not self._replaceStateNames then
        return stateName
    end

    return self._replaceStateNames[stateName] or stateName
end

---@param disabled boolean
function RMAnimator:SetDisable(disabled)
    disabled = disabled or false
    self.disabled = disabled
    self._viewAnimator:SetDisable(disabled)
end

---@param speed Fix
function RMAnimator:SetSpeed(speed)
    speed = speed or FOne
    self._speed = speed
    self._viewAnimator:SetSpeed(self._speed)
end

---@param stateName String
---@param layerIndex Int
---@param speed Fix
function RMAnimator:SetStateSpeed(stateName, layerIndex, speed)
    speed = speed or FOne
    self._rmCtrl:SetStateSpeed(stateName, layerIndex, speed)
    self._viewAnimator:SetStateSpeed(stateName, layerIndex, speed)
end

---@param speed Fix
---@param layerIndex Int
function RMAnimator:SetLayerSpeed(speed, layerIndex)
    speed = speed or FOne
    self._rmCtrl:SetLayerSpeed(layerIndex, speed)
    self._viewAnimator:SetLayerSpeed(layerIndex, speed)
end

---@param name String
---@param value Fix
function RMAnimator:SetFloat(name, value)
    self._rmCtrl:SetParameterValue(name, value)
    self._viewAnimator:SetFloat(name, value)
end

---@param name String
---@return Fix
function RMAnimator:GetFloat(name)
    return self._rmCtrl:GetParameterValue(name)
end

---@param name String
---@param value any
function RMAnimator:SetParameter(name, value)
    self._rmCtrl:SetParameterValue(name, value)
    self._viewAnimator:SetFloat(name, value)
end

---@param xz Fix
---@param y Fix
function RMAnimator:SetTransformScale(xz, y)
    self._context:SetTransformScale(xz, y)
end

---@param name String
---@return any
function RMAnimator:GetParameter(name)
    return self._rmCtrl:GetParameterValue(name)
end

---@param stateName String
---@param layerIndex Int
---@return Fix|number
function RMAnimator:GetStateLength(stateName, layerIndex)
    layerIndex = layerIndex or 1
    if layerIndex == 1 then
        return self._rmCtrl:GetStateLength(stateName, layerIndex)
    else
        return self._viewAnimator:GetStateLength(stateName, layerIndex)
    end
end

---@return RMAnimatorStateInfo|X3.PlayableAnimator.AnimatorStateInfo
function RMAnimator:GetPreviousStateInfo(layerIndex)
    layerIndex = layerIndex or 1
    if layerIndex == 1 then
        return self._rmCtrl:GetPreviousStateInfo(layerIndex)
    else
        return self._viewAnimator:GetPreviousStateInfo(layerIndex)
    end
end

---@return RMAnimatorStateInfo|X3.PlayableAnimator.AnimatorStateInfo
function RMAnimator:GetCurrentStateInfo(layerIndex)
    layerIndex = layerIndex or 1
    if layerIndex == 1 then
        return self._rmCtrl:GetCurrentStateInfo(layerIndex)
    else
        return self._viewAnimator:GetCurrentStateInfo(layerIndex)
    end
end

---@return String
function RMAnimator:GetCurrentStateName(layerIndex)
    local stateInfo = self:GetCurrentStateInfo(layerIndex)
    return stateInfo.name
end

---@return String
function RMAnimator:GetCurrentSubStateMachine(layerIndex)
    local stateInfo = self:GetCurrentStateInfo(layerIndex)
    return stateInfo.formSubStateMachineName
end

---@return String
function RMAnimator:GetPreviousStateName(layerIndex)
    local stateInfo = self:GetPreviousStateInfo(layerIndex)
    return stateInfo.name
end

---@param eventName string
---@param eventArgs table<string,any>
function RMAnimator:_OnLogicEventNotify(eventName, eventArgs)
    self._viewAnimator:OnEventNotify(eventName, eventArgs)
end

---@param layerIndex Int
---@param stateNotifyType RMStateNotifyType
---@param stateName string
---@param dValue Int Fix
---@param fixedOffsetTime  Fix
---@param fixedTransitionTime  Fix
function RMAnimator:_CrossFadeInFixedTime(layerIndex, stateNotifyType, stateName, dValue, fixedOffsetTime, fixedTransitionTime)
    ---仅处理第一层
    if layerIndex ~= 1 or stateNotifyType ~= RMStateNotifyType.CrossFade then
        return
    end

    self._viewAnimator:CrossFadeInFixedTime(stateName, dValue, fixedTransitionTime, layerIndex, fixedOffsetTime)
end

return RMAnimator
